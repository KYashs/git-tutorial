GIT is a Collaborating as well as Version Control System(VCS) Software which helps in managing and tracking changes in codes.It is developed by the same developer of guy which also developed Linux while coding
for kernel he faced issues with collaborating people as it was an Open Source Project, as many developer commit changes to the same which create bugs then he find and edit the code, and he had idea to   
developed a Revision Control System and later named as VCS.


-------------------------

Keywords:-

Version Control System:- It is a software technology which helps in managing and tracking changes in codes.
Repository:- Root Folder
README.md :- It is a text file which gives introduction of Repository
Head:- The latest commit is known as head.


-------------------------

Stages of Files:-

1. Created Working Directory
2. Staging area(Enabling File Tracking via GIT)
3. Repository


-------------------------
Basic GIT Commands

git init - Create an Empty Git Repository
git clone - Download an existing repository from Github
git status - To find the stage where our code is?
git rm  --cached (filename) to upstaged the file
git remote (-v)  -To connect your github repo with this file *Note Repo and Dictionary name must be same
git remote add origin (Add your URL to Your new Repo)
git add (origin (BranchName)) To push your files to your desired Branch.
git commit "(Your Message)"
git log - History log of commits with Head
git restore
git checkout 

-------------------------
Steps to create and update your Repository-

1. Create repo in github
2. Create a Dictionary at your desired location.
3. git config --global user.mail
4. git config --global user.name
5. clone the repo
6. Write your code and save it
7. git status
8. git add . (to select all files)
9. git commit -m "Message"
10. git push origin main
    Username for 'https://github.com': (Credentials)
    Password for 'https://mail': (Token-ID)
11. Check your status via git commit 


-------------------------
Branching strategy 
Detailed flowchart is added

Main - Protected
Dev - where developer work 
Str - stage or testing
Feat/(name of feature) - sub brach of dev
Hotfix/(issue) - main branch having issue then rollback the version

-------------------------
Advanced GIT Commands


git branch : shows all branches
git checkout -b (branch_name) : to create as well as switch the branch you created
git log --online  //Readable hash with commit message
git revert (with HASH number)
git reset: roll-back the edit
cherry-pick: Choose specific commit 
merger: to merge
rebase: 
squash: To Squeeze the commit log










